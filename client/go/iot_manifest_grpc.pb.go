// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/iot_manifest.AuthService/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/iot_manifest.AuthService/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_manifest.AuthService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_manifest.AuthService/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot_manifest.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AuthService_Auth_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _AuthService_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot_manifest.proto",
}

// IoTServiceClient is the client API for IoTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IoTServiceClient interface {
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (IoTService_GetDevicesClient, error)
	RecordStatistics(ctx context.Context, in *Device, opts ...grpc.CallOption) (*RecordStatisticsResponse, error)
	SendCommand(ctx context.Context, in *DeviceEvent, opts ...grpc.CallOption) (*Device, error)
	AddAccess(ctx context.Context, in *AddAccessRequest, opts ...grpc.CallOption) (*AddAccessResponse, error)
	RemoveAccess(ctx context.Context, in *RemoveAccessRequest, opts ...grpc.CallOption) (*RemoveAccessResponse, error)
}

type ioTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIoTServiceClient(cc grpc.ClientConnInterface) IoTServiceClient {
	return &ioTServiceClient{cc}
}

func (c *ioTServiceClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (IoTService_GetDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IoTService_ServiceDesc.Streams[0], "/iot_manifest.IoTService/GetDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &ioTServiceGetDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IoTService_GetDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type ioTServiceGetDevicesClient struct {
	grpc.ClientStream
}

func (x *ioTServiceGetDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ioTServiceClient) RecordStatistics(ctx context.Context, in *Device, opts ...grpc.CallOption) (*RecordStatisticsResponse, error) {
	out := new(RecordStatisticsResponse)
	err := c.cc.Invoke(ctx, "/iot_manifest.IoTService/RecordStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTServiceClient) SendCommand(ctx context.Context, in *DeviceEvent, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/iot_manifest.IoTService/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTServiceClient) AddAccess(ctx context.Context, in *AddAccessRequest, opts ...grpc.CallOption) (*AddAccessResponse, error) {
	out := new(AddAccessResponse)
	err := c.cc.Invoke(ctx, "/iot_manifest.IoTService/AddAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTServiceClient) RemoveAccess(ctx context.Context, in *RemoveAccessRequest, opts ...grpc.CallOption) (*RemoveAccessResponse, error) {
	out := new(RemoveAccessResponse)
	err := c.cc.Invoke(ctx, "/iot_manifest.IoTService/RemoveAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IoTServiceServer is the server API for IoTService service.
// All implementations must embed UnimplementedIoTServiceServer
// for forward compatibility
type IoTServiceServer interface {
	GetDevices(*GetDevicesRequest, IoTService_GetDevicesServer) error
	RecordStatistics(context.Context, *Device) (*RecordStatisticsResponse, error)
	SendCommand(context.Context, *DeviceEvent) (*Device, error)
	AddAccess(context.Context, *AddAccessRequest) (*AddAccessResponse, error)
	RemoveAccess(context.Context, *RemoveAccessRequest) (*RemoveAccessResponse, error)
	mustEmbedUnimplementedIoTServiceServer()
}

// UnimplementedIoTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIoTServiceServer struct {
}

func (UnimplementedIoTServiceServer) GetDevices(*GetDevicesRequest, IoTService_GetDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedIoTServiceServer) RecordStatistics(context.Context, *Device) (*RecordStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordStatistics not implemented")
}
func (UnimplementedIoTServiceServer) SendCommand(context.Context, *DeviceEvent) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedIoTServiceServer) AddAccess(context.Context, *AddAccessRequest) (*AddAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccess not implemented")
}
func (UnimplementedIoTServiceServer) RemoveAccess(context.Context, *RemoveAccessRequest) (*RemoveAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccess not implemented")
}
func (UnimplementedIoTServiceServer) mustEmbedUnimplementedIoTServiceServer() {}

// UnsafeIoTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IoTServiceServer will
// result in compilation errors.
type UnsafeIoTServiceServer interface {
	mustEmbedUnimplementedIoTServiceServer()
}

func RegisterIoTServiceServer(s grpc.ServiceRegistrar, srv IoTServiceServer) {
	s.RegisterService(&IoTService_ServiceDesc, srv)
}

func _IoTService_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IoTServiceServer).GetDevices(m, &ioTServiceGetDevicesServer{stream})
}

type IoTService_GetDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type ioTServiceGetDevicesServer struct {
	grpc.ServerStream
}

func (x *ioTServiceGetDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

func _IoTService_RecordStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).RecordStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_manifest.IoTService/RecordStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).RecordStatistics(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_manifest.IoTService/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).SendCommand(ctx, req.(*DeviceEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTService_AddAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).AddAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_manifest.IoTService/AddAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).AddAccess(ctx, req.(*AddAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTService_RemoveAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).RemoveAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_manifest.IoTService/RemoveAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).RemoveAccess(ctx, req.(*RemoveAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IoTService_ServiceDesc is the grpc.ServiceDesc for IoTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IoTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot_manifest.IoTService",
	HandlerType: (*IoTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordStatistics",
			Handler:    _IoTService_RecordStatistics_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _IoTService_SendCommand_Handler,
		},
		{
			MethodName: "AddAccess",
			Handler:    _IoTService_AddAccess_Handler,
		},
		{
			MethodName: "RemoveAccess",
			Handler:    _IoTService_RemoveAccess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _IoTService_GetDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "iot_manifest.proto",
}
