# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import iot_manifest_pb2 as iot__manifest__pb2


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Auth = channel.unary_unary(
                '/iot_manifest.AuthService/Auth',
                request_serializer=iot__manifest__pb2.AuthRequest.SerializeToString,
                response_deserializer=iot__manifest__pb2.AuthResponse.FromString,
                )
        self.VerifyToken = channel.unary_unary(
                '/iot_manifest.AuthService/VerifyToken',
                request_serializer=iot__manifest__pb2.VerifyTokenRequest.SerializeToString,
                response_deserializer=iot__manifest__pb2.VerifyTokenResponse.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Auth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Auth': grpc.unary_unary_rpc_method_handler(
                    servicer.Auth,
                    request_deserializer=iot__manifest__pb2.AuthRequest.FromString,
                    response_serializer=iot__manifest__pb2.AuthResponse.SerializeToString,
            ),
            'VerifyToken': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyToken,
                    request_deserializer=iot__manifest__pb2.VerifyTokenRequest.FromString,
                    response_serializer=iot__manifest__pb2.VerifyTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iot_manifest.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Auth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iot_manifest.AuthService/Auth',
            iot__manifest__pb2.AuthRequest.SerializeToString,
            iot__manifest__pb2.AuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iot_manifest.AuthService/VerifyToken',
            iot__manifest__pb2.VerifyTokenRequest.SerializeToString,
            iot__manifest__pb2.VerifyTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IoTServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDevices = channel.unary_stream(
                '/iot_manifest.IoTService/GetDevices',
                request_serializer=iot__manifest__pb2.GetDevicesRequest.SerializeToString,
                response_deserializer=iot__manifest__pb2.Device.FromString,
                )
        self.RecordStatistics = channel.unary_unary(
                '/iot_manifest.IoTService/RecordStatistics',
                request_serializer=iot__manifest__pb2.Device.SerializeToString,
                response_deserializer=iot__manifest__pb2.RecordStatisticsResponse.FromString,
                )
        self.SendCommand = channel.stream_stream(
                '/iot_manifest.IoTService/SendCommand',
                request_serializer=iot__manifest__pb2.DeviceEvent.SerializeToString,
                response_deserializer=iot__manifest__pb2.Device.FromString,
                )
        self.AddAccess = channel.stream_stream(
                '/iot_manifest.IoTService/AddAccess',
                request_serializer=iot__manifest__pb2.AddAccessRequest.SerializeToString,
                response_deserializer=iot__manifest__pb2.AddAccessResponse.FromString,
                )
        self.RemoveAccess = channel.stream_stream(
                '/iot_manifest.IoTService/RemoveAccess',
                request_serializer=iot__manifest__pb2.RemoveAccessRequest.SerializeToString,
                response_deserializer=iot__manifest__pb2.RemoveAccessResponse.FromString,
                )


class IoTServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCommand(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAccess(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAccess(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IoTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDevices': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDevices,
                    request_deserializer=iot__manifest__pb2.GetDevicesRequest.FromString,
                    response_serializer=iot__manifest__pb2.Device.SerializeToString,
            ),
            'RecordStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordStatistics,
                    request_deserializer=iot__manifest__pb2.Device.FromString,
                    response_serializer=iot__manifest__pb2.RecordStatisticsResponse.SerializeToString,
            ),
            'SendCommand': grpc.stream_stream_rpc_method_handler(
                    servicer.SendCommand,
                    request_deserializer=iot__manifest__pb2.DeviceEvent.FromString,
                    response_serializer=iot__manifest__pb2.Device.SerializeToString,
            ),
            'AddAccess': grpc.stream_stream_rpc_method_handler(
                    servicer.AddAccess,
                    request_deserializer=iot__manifest__pb2.AddAccessRequest.FromString,
                    response_serializer=iot__manifest__pb2.AddAccessResponse.SerializeToString,
            ),
            'RemoveAccess': grpc.stream_stream_rpc_method_handler(
                    servicer.RemoveAccess,
                    request_deserializer=iot__manifest__pb2.RemoveAccessRequest.FromString,
                    response_serializer=iot__manifest__pb2.RemoveAccessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iot_manifest.IoTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IoTService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iot_manifest.IoTService/GetDevices',
            iot__manifest__pb2.GetDevicesRequest.SerializeToString,
            iot__manifest__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iot_manifest.IoTService/RecordStatistics',
            iot__manifest__pb2.Device.SerializeToString,
            iot__manifest__pb2.RecordStatisticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCommand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iot_manifest.IoTService/SendCommand',
            iot__manifest__pb2.DeviceEvent.SerializeToString,
            iot__manifest__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAccess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iot_manifest.IoTService/AddAccess',
            iot__manifest__pb2.AddAccessRequest.SerializeToString,
            iot__manifest__pb2.AddAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveAccess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iot_manifest.IoTService/RemoveAccess',
            iot__manifest__pb2.RemoveAccessRequest.SerializeToString,
            iot__manifest__pb2.RemoveAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
